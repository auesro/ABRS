#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Dec 13 09:12:29 2019

@author: augustoer
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import savgol_filter

newSize = [400,400];
startFrame = 0;
endFrame = 6;

cap = cv2.VideoCapture('/home/augustoer/ABRS/Test/hour120.mp4')

width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    
if height == width:
    pass
if height < width:
    pad = width-height
if height > width:
    pad = height-width
    
for i in range(startFrame, endFrame):
    
    cap.set(1,i);
    ret, frame = cap.read()
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    
    # Pad frame to make it square adding black pixels (frame,top,bottom,left,right)
    if height == width:
        gray2 = gray; #changed gray for gray2
    if height < width:
        gray2 = cv2.copyMakeBorder(gray,0,pad,0,0,cv2.BORDER_CONSTANT,value=[0,0,0]) #changed gray for gray2
    if height > width:
        gray2 = cv2.copyMakeBorder(gray,0,0,0,pad,cv2.BORDER_CONSTANT,value=[0,0,0]) #changed gray for gray2
        
    #Resize frame to newSize
    rs = cv2.resize(gray2,(newSize[0],newSize[1]));
    #Reshape the frame into a 1 row, many columns (400*400=160000)
    frameVect = rs.reshape(1,newSize[0]*newSize[1]);
    #Make the vector type float
    frameVectFloat = frameVect.astype(float);    
    
    if i == startFrame:
        frRec = frameVectFloat;
    if i > startFrame:
        frRec = np.vstack((frRec,frameVectFloat));

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()    
startWin = 0;
endWin= 3;

for i in range(startWin,endWin):

    frame2 = frRec[i,:]; #changed frame for frame2
    #Nothing changes from frame2 to gray3, they are identical
    gray3 = frame2.reshape(newSize[0]*newSize[1]); #changed gray2 for gray3 #changed frame for frame2
    rf = gray3; #changed gra2 for gray3
    rs2 = rf; #changed rs for rs2
    
    frameVect = rs2.reshape(1,int(newSize[0])*int(newSize[1]));
    frameVectFloat = frameVect.astype(float)
    
    if i == startWin:
       previousFrame = frameVectFloat;
       frameDiffComm = previousFrame*0;
       frameVectFloatRec = frameVectFloat;
    
    if i > startWin:
        frameDiffComm = frameDiffComm + np.absolute(frameVectFloat - previousFrame);
        frameVectFloatRec = np.vstack((frameVectFloatRec,frameVectFloat));
        previousFrame = frameVectFloat;
    
indMaxDiff = np.argmax(frameDiffComm);

rowMaxDiff = np.floor(indMaxDiff/int(newSize[0]));
colMaxDiff = indMaxDiff - (rowMaxDiff*int(newSize[0]));

rowMaxDiff = rowMaxDiff.astype(int); 
colMaxDiff = colMaxDiff.astype(int);

#Find the value of the pixel in the frame that shows the highest difference in intensity respect to the previous frame
maxMovement = np.max(frameDiffComm);

posDic = {"xPos" : colMaxDiff, "yPos" : rowMaxDiff};
    
for i in range(0,(endWin-startWin)):
    roi = 100;
    #Make frameVectFloatRec square
    rs = frameVectFloatRec[i,:].reshape(int(newSize[0]),int(newSize[0]))
    #Calculate a roixroi square around the pixel of maximum intensity difference 
    bottomOvershot=0
    rightOvershot=0
    
    topEdge = rowMaxDiff-int(roi*0.5);
    if topEdge < 0:
        topEdge=0;
    bottomEdge = rowMaxDiff+int(roi*0.5);
    if bottomEdge > int(newSize[0]):
        bottomOvershot = bottomEdge-int(newSize[0])
        bottomEdge=int(newSize[0]);
    leftEdge = colMaxDiff-int(roi*0.5);
    if leftEdge < 0:
        leftEdge=0;
    rightEdge = colMaxDiff+int(roi*0.5);
    if rightEdge > int(newSize[0]):
        rightOvershot = rightEdge-int(newSize[0])
        rightEdge=int(newSize[0]);
    

    #Select the roixroi square from the frame
    cfr = rs[topEdge:bottomEdge,leftEdge:rightEdge];
    shapeCfr = cfr.shape;

    #Correct (adding zeros) to make a square shape in case it is not roixroi due to negative values in above section substractions
    if topEdge == 0:
        rw = np.zeros((np.absolute(shapeCfr[0]-roi),shapeCfr[1]))
        cfr = np.vstack((rw,cfr))
        shapeCfr = cfr.shape; 
    if bottomOvershot > 0:
        rw = np.zeros((np.absolute(shapeCfr[0]-roi),shapeCfr[1]))
        cfr = np.vstack((cfr,rw))
        shapeCfr = cfr.shape; 
    if leftEdge == 0:
        col = np.zeros((shapeCfr[0], np.absolute(shapeCfr[1]-roi)))
        cfr = np.hstack((col,cfr))
        shapeCfr = cfr.shape; 
    if rightOvershot > 0:
        col = np.zeros((shapeCfr[0], np.absolute(shapeCfr[1]-roi)))
        cfr = np.hstack((cfr,col))
        shapeCfr = cfr.shape;
    
    #Resize roixroi to CVNsizexCVNsize:
    smallcfr = cv2.resize(cfr,(80,80));
    cfrVect = smallcfr.reshape(1,80*80);
    cv2.destroyAllWindows();
    
    if i == 0:
        cfrVectRec = cfrVect;
    if i > 0:
        cfrVectRec = np.vstack((cfrVectRec,cfrVect));

windowST=2      
for w in range(0,frRec.shape[0]-windowST):

    startWin = w;
    endWin = startWin + windowST;              
    # cG=center_of_gravity(cfrVectRec);
    sh = np.shape(cfrVectRec);
    F=np.absolute(np.fft.fft(cfrVectRec,axis=0))
    av = np.zeros((1,sh[0]));
    av[0,:] = np.arange(1,sh[0]+1);
    A = np.repeat(av,sh[1],axis=0);
    FA = F*np.transpose(A);
    sF = np.sum(F,axis=0);
    sFA = np.sum(FA,axis=0);

    cG = sFA/sF;
    

    # averageSubtFrameVecRec = subtract_average(cfrVectRec,0)
    shFrameVectRec = np.shape(cfrVectRec);
    averageSubtFrameVecRec = np.zeros((shFrameVectRec[0],shFrameVectRec[1]));
    averageVect = np.mean(cfrVectRec,0);
    for i in range(0,shFrameVectRec[0]):
        averageSubtFrameVecRec[i,:] = cfrVectRec[i,:] - averageVect;     
    
    CVNsize=80;
    imRaw = np.reshape(cfrVectRec[1,:],(CVNsize,CVNsize));
    imRaw = imRaw.astype('uint')

    imDiff = np.reshape(cfrVectRec[1,:]-cfrVectRec[0,:],(CVNsize,CVNsize));
    imDiffAbs = np.absolute(imDiff)
    maxImDiffAbs = np.max(np.max(imDiffAbs))
    imDiffCl = np.zeros((CVNsize,CVNsize))
    imDiffCl[imDiffAbs > maxImDiffAbs/10] = imDiff[imDiffAbs > maxImDiffAbs/10]
    imDiffClNorm = imDiffCl/maxImDiffAbs
                                
    totVar = np.sum(np.absolute(averageSubtFrameVecRec),axis=0)
    imVar = np.reshape(totVar,(CVNsize,CVNsize))
    imVarNorm = imVar/np.max(np.max(imVar))
    imVarBin = np.zeros((CVNsize,CVNsize))
    imVarBin[imVarNorm > 0.10] = 1;
                                
    I = np.reshape(cG,(CVNsize,CVNsize))*imVarBin;
    I = np.nan_to_num(I);
                                
    # imSTsm = smooth_2d (I, 3)
    imSTsm = savgol_filter(I, window_length=3, polyorder=0);
    sM = imSTsm.reshape((CVNsize*CVNsize))
    sM = np.nan_to_num(sM)

    if np.max(sM) > 0:
        sMNorm = sM/np.max(sM)
    else:
        sMNorm = sM

    I_RS = np.reshape(sMNorm,(CVNsize,CVNsize))

    imDiffAbs = np.absolute(imDiffClNorm)

    imDiffClNeg = np.zeros((CVNsize,CVNsize))
    imDiffClPos = np.zeros((CVNsize,CVNsize))
    imDiffClNeg[imDiffClNorm<0] = np.absolute(imDiffClNorm[imDiffClNorm<0])
    imDiffClPos[imDiffClNorm>0] = imDiffClNorm[imDiffClNorm>0]

    imDiffClNormNeg = imDiffClNeg/np.max(np.max(imDiffClNeg))
    imDiffClNormPos = imDiffClPos/np.max(np.max(imDiffClPos))
    

    rgbArray = np.zeros((CVNsize,CVNsize,3), 'uint8')
    rgbArray[..., 0] = I_RS*255 #blue channel for cv2.imshow()/ red channel for plt.imshow()
    rgbArray[..., 1] = imDiffAbs*255 #green channel for cv2.imshow() and plt.imshow()
    rgbArray[..., 2] = imRaw*255 #red channel for cv2.imshow()/ blue channel for plt.imshow()

    im3C = rgbArray
    
    recIm3C = np.zeros((6,CVNsize,CVNsize,3))
    recIm3C[i,:,:,:]=im3C

              
               
# rs3 = frameVectFloatRec[0,:].reshape(int(newSize[0]),int(newSize[0]))
# cfr = rs3[0:80,0:80];
# # cfrVect = cfr.reshape(1,100*100)

# smallcfr = cv2.resize(cfr,(80,80));
# # smallcfruint = smallcfr.astype('uint8')
# cv2.destroyAllWindows();

# cfrVect = smallcfr.reshape(1,80*80);

# cfrVectRec = cfrVect






# imRaw = np.reshape(cfrVectRec[0,:],(80,80));
# imRaw = imRaw.astype('uint')


# rgbArray = np.zeros((80,80,3), 'uint8')
# # rgbArray[..., 0] = I_RS*255 #blue channel for cv2/ red channel for matplotlib
# # rgbArray[..., 1] = 30*255 #green channel for matplotlip and cv2
# rgbArray[..., 2] = imRaw*255 #red channel for cv2/ blue channel for matplotlib


# im3C = rgbArray

plt.imshow(im3C)
# # cv2.imshow('', im3C)
# # key = cv2.waitKey(0)
# # while key not in [ord('q'), ord('k')]:
# #     key = cv2.waitKey(0)
# # # Quit when 'q' is pressed
# #     if key == ord('q'):
# #         break
# # cv2.destroyAllWindows()